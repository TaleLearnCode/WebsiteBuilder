SET IDENTITY_INSERT dbo.Presentation ON
GO

MERGE dbo.Presentation AS TARGET
USING (VALUES ( 1, 1, 0, 'building-event-driven-microservices', 'Building Event-Driven Microservices', 'Building Event-Driven Microservices', 'https://github.com/TaleLearnCode/BuildingEventDrivenMicroservices', 'With Azure Functions, develop more concise event-driven microservices quicker and benefit from serverless technology.', '<p>Microservices help build modern applications to be more resilient and reduce dependencies. But, these involve complex web frameworks and containerization to get those benefits. With Azure Functions, we can develop more concise services quicker and get the benefits of serverless technology.</p>', '<p>The microservices pattern serves as an excellent practice in building modern applications to be more resilient and reduce dependencies across the multiple parts of a product. But generally, these involve complex web frameworks and containerization to get those benefits. But using Azure Functions, we can develop more concise services even quicker and get many of the benefits of serverless technology without lots of operational management. In this session, we’ll explore Azure Functions and see how they can be used to build out a microservice-based solution.</p>'),
              ( 2, 1, 0, 'time-traveling-data', 'Time Traveling Data: SQL Server Temporal Tables', 'Time Traveling Data', 'https://github.com/TaleLearnCode/TimeTravellingData', 'With SQL Server and Entity Framework, you no longer need to build complicated triggers and procedures to track data history.', 'During this session, Chad will explain the key scenarios around the use of Temporal Tables, how system-time works, how to get started, and finish up with a demo to show you Temporal Tables in action, including the easy-to-use T-SQL syntax to implement all of the Temporal goodness. We will also look at how Entity Framework Core 6 now lets us do all this directly in Entity Framework.', 'Have you built complicated triggers and procedures to track the history of data in your databases? What if SQL Server or Azure SQL could take care of all that for you and you just had to change a couple of settings? Starting with SQL Server 2016, there is support for system-versioned temporal tables as a database feature that brings built-in support for providing information about data stored in a table at any point in time rather than only the data that is correct as the current moment time. During this session, Chad will explain the key scenarios around the use of Temporal Tables, how system-time works, how to get started, and finish up with a demo to show you Temporal Tables in action, including the easy-to-use T-SQL syntax to implement all of the Temporal goodness. We will also look at how Entity Framework Core 6 now lets us do all this directly in Entity Framework.'),
              ( 3, 1, 0, 'building-microservice-rest-apis-using-azure-functions', 'Building Microservice REST APIs Using Azure Functions', 'Building Microservice REST APIs Using Azure Functions', 'https://github.com/TaleLearnCode/BuildingMicroserviceRESTAPIsUsingAzureFunctions', 'Explore Azure Functions and see how they can be used to build out a microservice-based solution.', 'In this session, we’ll explore Azure Functions and see how they can be used to build out a microservice-based solution.', 'The microservice pattern serves as an excellent practice in building modern applications to be more resilient and reduce dependencies across the multiple parts of a product. But generally, these involve complex web frameworks and containerization to get those benefits. But using Azure Functions, we can develop more concise services even quicker and get many of the benefits of serverless technology without lots of operational management. In this session, we’ll explore Azure Functions and see how they can be used to build out a microservice-based solution.'),
              ( 4, 1, 0, 'the-taming-of-the-api', 'The Taming of the API', 'The Taming of the API', 'https://github.com/TaleLearnCode/TheTamingOfTheAPI', 'Look at API gateways and how they make your APIs usable and then go into detail how to use Azure’s API Management service.', 'We will look at API gateways in general and how to use them to make your APIs usable. We’ll then go into examples using Azure’s API Management service, which allows you to streamline work in Azure and multi-cloud environments to provide your customers with a single place to work with your APIs.', '<p>Tranio tells Lucentio, “No profit grows where is no pleasure ta’en: In brief, sir, study what you most affect.” While Tranio’s point was to get Lucentio to loosen up for him to “live a little,” this is still a valuable lesson to developers. Your team has worked hard to build the functionality that provides all of your customers’ needs, but how easily have you made it for them to access that? Sometimes building the API is the easy part; making them usable is the hard part. But by adding an API gateway, we can make it easier for customers to access functionality and data provided by your application.</p><p>In this presentation, we will look at API gateways in general and how to use them to make your APIs usable. We’ll then go into examples using Azure’s API Management service, which allows you to streamline work in Azure and across hybrid and multi-cloud environments to provide your customers with a single place to work with your APIs.</p>'),
              ( 5, 1, 0, 'advanced-serverless-workshop', 'Advanced Serverless Workshop', 'Advanced Serverless Workshop', 'https://github.com/TaleLearnCode/AdvancedServerlessWorkshop', 'Interact with experienced serverless professionals and get 3 different perspectives on how you can level up your serverless architecture.', 'This four-part workshop is designed for experienced serverless developers and architects who want to deepen their knowledge, learn exciting new aspects of serverless technology and network with other serverless experts. Some perspective on the major platforms will be provided, but this workshop is intended for all practitioners regardless of their current technology stack.', '<p>Have you been doing serverless for awhile, but don’t feel like you’re getting the most out of it? This interactive workshop will give you the chance to interact with experienced serverless professionals and get three different perspectives on how you can level up your serverless architecture.</p><ul><li>Learn new approaches and design patterns</li><li>Hear stories from the trenches about what worked (and what didn’t)</li><li>Gain perspective on aspects such as cost, performance, scalability, and resilience</li><li>Includes examples covering AWS Lambda, Azure Function, and Google Functions</li></ul><p>This four-part workshop is designed for experienced serverless developers and architects who want to deepen their knowledge, learn exciting new aspects of serverless technology and network with other serverless experts. Some perspective on the major platforms will be provided, but this workshop is intended for all practitioners regardless of their current technology stack.</p>'),
              ( 6, 1, 0, 'file-new-build-a-fully-managed-and-documented-api', 'File New: Build a Fully-Managed and Documented API', 'File New: Build a Fully-Managed and Documented API', 'https://github.com/TaleLearnCode/FileNew-APIManagement', 'Starting with nothing, during this session, we will create an Azure API Management instance ready for real-world usage.', 'Starting with nothing, during this session, we will create an Azure API Management instance, configure API endpoints to be served by the instance, set up rate-limiting, transform data coming in and out of the endpoints, provide a portal for developers to interact with the API, and add security and performance.', '<p>Azure API Management is a way to create consistent modern API gateways for existing backend services. It provides an interface for your backend services and APIs while ensuring they are secured, monitored, maintained, well-documented, and published to the cloud. In this session, we will focus on the how by creating a new Azure API Management instance, configuring API endpoints to be served by the API Management instance, setting up rate-limiting, transforming data coming in and out of the endpoints, providing a portal for developers to intact with the API, and add security and performance. You will see firsthand how to get the most out of Azure API Management to make your APIs accessible to your internal and external customers.</p>'),
              ( 7, 1, 0, 'file-new-build-a-serverless-microservice-from-scratch', 'File New: Build a Serverless Microservice from Scratch', 'File New: Build a Serverless Microservice from Scratch', 'https://github.com/TaleLearnCode/FileNew-ServerlessMicroservices', 'Starting with an empty Visual Studio solution, during this session, we will build a serverless microservice to solve a real-world problem.', 'Starting with an empty Visual Studio solution, during this session, we will build a serverless microservice to solve a real-world problem.', '<p>The microservice pattern serves as an excellent practice in building modern applications to be more resilient and reduce dependencies across multiple components of a system. Often these solutions are based on complex web frameworks and containerization. Using Azure Functions, we can develop more concise services even quicker and get many additional benefits that come with serverless technology without all the operational management. In this session, we will focus on the how by starting with an empty Visual Studio solution and building a complete serverless microservice solution using Azure Functions that solve a real-world problem. You will see firsthand how to design, develop, and deploy the Azure Function App providing services usable to perform valuable services.</p>'),
              ( 8, 1, 0, 'file-new-build-a-event-driven-architected-microservice-from-scratch', 'File New: Build a Event-Driven Architected Microservice from Scratch', 'File New: Event-Driven Architected Microservice from Scratch', 'https://github.com/TaleLearnCode/FileNew-EventDrivenArchitectedMicroservice', 'Starting with an empty solution, we will build an event-driven architected microservice solution to solve a real-world problem.', 'Starting with an empty Visual Studio solution, during this session we will build an event-driven architected microservice solution to solve a real-world problem.', '<p>Event-driven microservice architectures provide a versatile approach to designing and integrating complex software systems with independent, encapsulated components. During this session, we will focus on the how by starting with an empty Visual Studio solution and building a complete event-driven architected microservice to solve a real-world problem. You will see firsthand how to design, develop, and deploy a decoupled, encapsulated, responsive, scalable, and independent solution. We’ll talk about potential pitfalls, and you will see how to get around them.</p>'),
              ( 9, 1, 0, 'secrets-of-conflict-resolution', 'Secrets of Conflict Resolution', 'Secrets of Conflict Resolution', 'https://github.com/TaleLearnCode/SecretsOfConflictResolution', 'Conflict within your team is inevitable. Come learn how to deal with this conflict so it doesn''t tear apart your team.', '<p>Conflict within your team is inevitable. Come learn how to deal with this conflict so it doesn''t tear apart your team.</p>', '<p>One of the most challenging aspects of being a leader is dealing with conflict amongst your team. Yet, productivity is vital to running the team like a well-oiled machine, even in adversity. Improve your relationships with coworkers, clients, and managers and find your way through conflict back to cooperation. This session will provide you with the secrets of effective conflict resolution and how to prevent conflicts from ever starting.</p>'),
              (10, 1, 0, 'building-great-libraries', 'Building Great Libraries', 'Building Great Libraries', 'https://github.com/TaleLearnCode/BuildingGreatLibraries', 'Learn how build class libraries that developers will enjoy using instead of those they curse at by applying best practices.', 'Learn how build class libraries that developers will enjoy using instead of those they curse at by applying best practices.', '<p>“Bad libraries build collections; good libraries build services; great libraries build communities.” Whether you are building a class library containing common functionality to use within your company’s products, a class library for your customers to be able to use your services, or the next great open-source project; you should take great care when building a class library so that it is easy to use and widely adopted. During this session, we will talk about coding standards you should apply, documentation, dependencies, publishing, versioning, and handling breaking changes so that you can build class libraries that developers will enjoy using instead of those they curse at.</p>'),
              (11, 1, 0, 'developing-resilient-serverless-solutions', 'Developing Resilient Serverless Solutions', 'Developing Resilient Serverless Solutions', 'https://github.com/TaleLearnCode/DevelopingResilientServerlessSolution', 'Just because serverless means you do not have to worry about the server less, there is still work needed to ensure resiliency.', 'Just because serverless means you do not have to worry about the server less, there is still work needed to ensure resiliency.', '<p>So, you have decided to develop a serverless solution using Azure Functions because it makes it easy to get things up and running and handles all the scalability issues for you. All you have to do is write the code. However, while Azure Functions (and other similar serverless services) offer a great set of features that make scalability, resilience, and reliability easier, it is not fool-proof and can still go down. During this session, we will talk about how to make your Azure Function solutions more resilient, how to validate it will continue to work under load, and how to know about potential failures or at least the failures before your customer does.</p>'),
              (12, 1, 0, 'design-and-develop-a-serverless-event-driven-microservice-based-solution-in-2-days', 'Design and Develop a Serverless Event-Driven Microservice-Based Solution in 2 Days', 'https://github.com/TaleLearnCode/Serverless2DayWorkshop', 'Design and Develop a Serverless Event-Driven Microservice-Based Solution in 2 Days', 'Hands-on two-day workshop where you will design, develop, and publish a serverless event-driven microservice-based solution.', 'Hands-on two-day workshop where you will design, develop, and publish a serverless event-driven microservice-based solution.', '<p>You have heard all the buzzwords such as microservices, event-driven architecture, serverless, etc. You probably have attended sessions that talk about these terms. But how do you put all that together?</p><p>During this two-day workshop, you will start by designing a solution using serverless and event-driven cloud services using microservice patterns. Then you will build that solution using .NET, Azure services, and other best-practice tools. Finally, you will deploy that solution to the cloud so your customers can reap the rewards of a well-architected, reliable, and scalable solution that meets their needs today and provides for growth in the future.</p>'),
              (13, 1, 0, 'beyond-hello-world-getting-deeper-into-azure-functions', 'Beyond Hello World: Getting Deeper into Azure Functions', 'Getting Deeper into Azure Functions', 'https://github.com/TaleLearnCode/BeyondHelloWorld_GettingDeeperIntoAzureFunctions', 'There is more to Azure Functions than just the HTTP trigger; see real-world examples of the different triggers and bindings.', 'There is more to Azure Functions than just the HTTP trigger; come to see real-world examples of the different types of triggers and bindings.', '<p>By now, you surely have seen the HTTP trigger within Azure Functions. Just about every presentation uses that trigger to show how awesome Azure Functions can be. But there is a bunch more you can do with Azure Functions using the other triggers and bindings, which make Azure Functions a fantastic tool in your tool chest for solving all sorts of needs. So come and hear about these triggers and bindings and see real-world examples of how they have been employed in different solutions to solve real customer needs.</p>'),
              (14, 1, 0, 'going-schemaless', 'Going Schema-less: How to migrate a relational database to a NoSQL database', 'Going Schema-less', 'https://github.com/TaleLearnCode/GoingSchemaless', 'Learn about the benefits and pitfalls of moving data from a relational data model to a NoSQL data model.', 'Learn about the benefits and pitfalls of moving data from a relational data model to a NoSQL data model with demonstrations using Cosmos DB and .NET backends.', '<p>There can be a lot of great benefits of developing with a NoSQL database over a relational database. In this presentation, you will learn about those benefits and also the potential pitfalls. There will be demonstrations where we take relationally developed data, restructure it into a NoSQL database (Cosmos DB in particular), and create an application to work with that data.</p>')



              
              
              
              --( 2, 1, 0, 'technical-debt-is-not-free', 'Technical Debt Is Not Free', 'Technical Debt Is Not Free', 'https://github.com/TaleLearnCode/TechnicalDebtIsNotFree', 'We''ll explore tech debt, how to document and track it, and how to address it so that it does not cause significant issues later on.', '<p>Teams often rack up tech debt without realizing it. Even mature teams might recognize and maybe even document tech debt; but what good is it if you don''t take action. We''ll explore tech debt, how to document and track it, and how to address it so that it does not cause significant issues later on.</p>', '<p>So many software development teams rack up technical debt and do not even realize it. But even if you are a more mature team and recognize and maybe even document technical debt, what good is it if you do not take action. Just like in other parts of our life, just because we can accumulate bunches of debt, if we do not take steps to handle it, we will be destined for bad times when that comes due. In this session, we’ll explore technical debt, how to properly document and track it, and – more importantly – how to address it so that it does not cause significant issues down the road.</p>'))
              --(PresentationId, PresentationTypeId, IsArchived, Permalink, PresentationTitle, PresentationShortTitle, RepoLink, Summary, ShortAbstract, Abstract)
             )
AS SOURCE (PresentationId,
           PresentationTypeId,
           IsArchived,
           Permalink,
           PresentationTitle,
           PresentationShortTitle,
           RepoLink,
           Summary,
           ShortAbstract,
           Abstract)
ON TARGET.PresentationId = SOURCE.PresentationId
WHEN MATCHED THEN UPDATE SET TARGET.PresentationTypeId     = SOURCE.PresentationTypeId,
                             TARGET.IsArchived             = SOURCE.IsArchived,
                             TARGET.PresentationTitle      = SOURCE.PresentationTitle,
                             TARGET.PresentationShortTitle = SOURCE.PresentationShortTitle,
                             TARGET.RepoLink               = SOURCE.RepoLink,
                             TARGET.Summary                = SOURCE.Summary,
                             TARGET.ShortAbstract          = SOURCE.ShortAbstract,
                             TARGET.Abstract               = SOURCE.Abstract,
                             TARGET.Permalink              = SOURCE.Permalink
WHEN NOT MATCHED THEN INSERT (PresentationId,
                              PresentationTypeId,
                              IsArchived,
                              PresentationTitle,
                              PresentationShortTitle,
                              RepoLink,                              
                              Summary,
                              ShortAbstract,
                              Abstract,
                              Permalink)
                      VALUES (SOURCE.PresentationId,
                              SOURCE.PresentationTypeId,
                              SOURCE.IsArchived,
                              SOURCE.PresentationTitle,
                              SOURCE.PresentationShortTitle,
                              SOURCE.RepoLink,                              
                              SOURCE.Summary,
                              SOURCE.ShortAbstract,
                              SOURCE.Abstract,
                              SOURCE.Permalink)
WHEN NOT MATCHED BY SOURCE THEN DELETE;
GO

SET IDENTITY_INSERT dbo.Presentation OFF
GO